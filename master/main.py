# generated by fastapi-codegen:
#   filename:  client-master_openapi.json
#   timestamp: 2025-09-17T03:29:58+00:00

from __future__ import annotations

import argparse
import uuid
from enum import Enum

from fastapi import BackgroundTasks, FastAPI, status
from fastapi.responses import JSONResponse
from .models import (
    HealthCheck,
    JobCancelJobIdPostResponse,
    JobResultJobIdGetResponse,
    JobStatusJobIdGetResponse,
    JobSubmitPostRequest,
    JobSubmitPostResponse,
)

app = FastAPI(
    title="MapReduce Master API",
    version="0.2.0",
)


def handle_master(args: argparse.Namespace) -> None:
    raise NotImplementedError


class JobStatus(str, Enum):
    RUNNING = "RUNNING"
    STOPPED = "STOPPED"
    INACTIVE = "INACTIVE"


class Master:
    def __init__(self):
        self.job_status = {}

    def begin_job(self, body: JobSubmitPostRequest):
        # Print the parsed request body
        job_id = str(uuid.uuid4())
        text_directory_url = body.data_url
        code_url = body.code_url

        self.job_status[job_id] = JobStatus.RUNNING

        return JSONResponse(
            content=JobSubmitPostResponse(
                job_id=job_id, status="Job started"
            ).model_dump(),
            status_code=status.HTTP_201_CREATED,
        )


@app.get(
    "/",
    response_model=HealthCheck,
)
def health_check() -> HealthCheck:
    """
    Health Check
    """
    return HealthCheck(status="ok")


@app.post("/job/cancel/{job_id}", response_model=JobCancelJobIdPostResponse)
def cancel_job(job_id: str) -> JobCancelJobIdPostResponse:
    """
    Cancel a running job
    """
    pass


@app.get("/job/result/{job_id}", response_model=JobResultJobIdGetResponse)
def get_job_result(job_id: str) -> JobResultJobIdGetResponse:
    """
    Get job result
    """
    pass


@app.get("/job/status/{job_id}", response_model=JobStatusJobIdGetResponse)
def get_job_status(job_id: str) -> JobStatusJobIdGetResponse:
    """
    Get job status
    """
    pass


@app.post(
    "/job/submit",
    response_model=None,
    responses={
        "201": {
            "model": JobSubmitPostResponse,
            "description": "Job accepted",
        },
        "400": {"description": "Invalid job submission"},
    },
)
def submit_job(
    body: JobSubmitPostRequest, background_tasks: BackgroundTasks
) -> JSONResponse:
    """
    Submit a new job
    """

    master = Master()
    response = master.begin_job(body)
    return response
